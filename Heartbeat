--[[
Resident, zero sleep, name: "Heartbeat"

This script monitors keepalive messages from scripts, and should they fail to be received it disables/enables them.

Receives messages of the format: "[net]/[app]/[group]+[os.time()]"

The 'storageExists' element ensures that this script only monitors for heartbeat when a given storage value is set.
An example use case is when the 'HUE'send receive' script has not yet gained a Hue bridge client key.
--]]

logging = false

-- Scripts to monitor
scripts = {
  ['MQTT send receive'] = { ['max'] = 20, },
  ['HUE send receive'] = { ['max'] = 90, ['storageExists'] = 'hueactive' },
}

if server then server:close() end  -- Handle script re-entry
server = require('socket').udp()
server:settimeout(1)
if not server:setsockname('127.0.0.1', 5433) then
  logger('Error: Could not listen on port 5433')
  socket.sleep(60)
  do return end
end

function contains(prefix, text) local pos = text:find(prefix, 1, true); if pos then return pos >= 1 else return false end end

local k, v

for k, v in pairs(scripts) do v.heartbeat = os.time() end

log('Heartbeat initialised')


--[[
Monitor heartbeats
--]]

while true do
  local timeCheck, cmd, s
  
  timeCheck = socket.gettime()

  cmd = server:receive()
  if cmd and type(cmd) == 'string' then

    -- If the command contains a plus then it's a heartbeat
    if contains('+', cmd) then
      local parts = string.split(cmd, '+')
      if #parts == 2 then
        s = scripts[parts[1]]
        if s then
          s.heartbeat = tonumber(parts[2])
          if logging then log('Heartbeat from '..parts[1]..' at '..s.heartbeat) end
        end
      end
    end
    
  end

  local k, v, storageE
  
  for k, v in pairs(scripts) do
    if script.status(k) ~= nil then
      if v.storageExists ~= nil then
        storageE = storage.get(v.storageExists)
        if not storageE then v.heartbeat = os.time() end
      end

      secondsSince = os.time() - v.heartbeat

      if secondsSince >= v.max and (not v.storageExists or storageE) then -- No heartbeat received for specified period, so re-start the script
        log('Missed '..k..' script heartbeat (last received '..secondsSince..' seconds ago) - Re-starting script')
        script.disable(k); script.enable(k)
        v.heartbeat = os.time()
      end
    end
  end
end
--[[
Resident, zero sleep, name: "Heartbeat"

This script monitors keepalive messages from scripts, and should they fail to be received it disables/enables them.

Receives messages of the format: "[net]/[app]/[group]+[os.time()]"

The 'storageExists' element ensures that this script only monitors for heartbeat when a given storage value is set.
An example use case is when the 'HUE'send receive' script has not yet gained a Hue bridge client key.

This script does not need to start before the scripts being monitored.
--]]

logging = false

--[[
*** Use code like the following to register with this Heartbeat script...

heartbeatConditions = { ['max'] = 90, ['storageExists'] = 'hueactive' } -- At most 90 seconds without a heartbeat or else restart, but only if hueactive exists

function isRegistered() hbeat = storage.get('heartbeat', {}) for k, _ in pairs(hbeat) do if k == _SCRIPTNAME then return true, hbeat end end return false, hbeat end
if sendHeartbeat > 0 then
  -- Check whether registration is required, and if not registered then do so
  local r, hbeat = isRegistered()
  if not r then
    if logging then log('Registering '.._SCRIPTNAME..' with Heartbeat') end
    hbeat[_SCRIPTNAME] = heartbeatConditions
    storage.set('heartbeat', hbeat)
  end
else
  local r, hbeat = isRegistered() if r then hbeat[_SCRIPTNAME] = nil storage.set('heartbeat', hbeat) end
end

*** And use code like this to periodically send a heartbeat from monitored resident scripts...

sendHeartbeat = 5      -- Send a heartbeat to the 'Heartbeat' script every n seconds (zero to disable heartbeat)
heartbeat = os.time()

if sendHeartbeat > 0 then
  local stat, err = pcall(function ()
    if os.time() - heartbeat >= sendHeartbeat then
      heartbeat = os.time(); require('socket').udp():sendto(_SCRIPTNAME..'+'..heartbeat, '127.0.0.1', 5433)
    end
  end)
  if not stat then logger('A fault occurred sending heartbeat. Restarting...'); do return end end
end

--]]

scripts = {}

if server then server:close() end  -- Handle script re-entry
server = require('socket').udp()
server:settimeout(1)
if not server:setsockname('127.0.0.1', 5433) then
  logger('Error: Could not listen on port 5433')
  socket.sleep(60)
  do return end
end

function contains(prefix, text) local pos = text:find(prefix, 1, true); if pos then return pos >= 1 else return false end end

log('Heartbeat initialised')


--[[
Monitor heartbeats
--]]

while true do
  local timeCheck, cmd, s
  
  timeCheck = socket.gettime()

  cmd = server:receive()
  if cmd and type(cmd) == 'string' then

    -- If the command contains a plus then it's a heartbeat
    if contains('+', cmd) then
      local parts = string.split(cmd, '+')
      if #parts == 2 then
        s = scripts[parts[1]]
        if s then
          s.heartbeat = tonumber(parts[2])
          if logging then log('Heartbeat from '..parts[1]..' at '..s.heartbeat) end
        end
      end
    end
    
  end

  local k, v, storageE
  
  for k, v in pairs(scripts) do
    if script.status(k) ~= nil then
      if v.storageExists ~= nil then
        storageE = storage.get(v.storageExists)
        if not storageE then v.heartbeat = os.time() end
      end

      secondsSince = os.time() - v.heartbeat

      if secondsSince >= v.max and (not v.storageExists or storageE) then -- No heartbeat received for specified period, so re-start the script
        log('Missed '..k..' script heartbeat (last received '..secondsSince..' seconds ago) - Re-starting script')
        script.disable(k); script.enable(k)
        v.heartbeat = os.time()
      end
    end
  end

  -- Check for heartbeat changes
  hbeat = storage.get('heartbeat', {})
  for k, v in pairs(hbeat) do
    if scripts[k] == nil then
      scripts[k] = v
      v.heartbeat = os.time()
    end
  end
  ::again::
  for k, v in pairs(scripts) do
    if hbeat[k] == nil then scripts[k] = nil goto again end
  end
end
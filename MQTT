--[[
Event-based, execute during ramping, name: "MQTT"

Pushes CBus events to MQTT resident scripts via internal sockets and maintains CBus 'lastlevels'

Tag required objects with the "MQTT" keyword and this script will run whenever one of those objects change.

Last levels are tracked so that MQTT 'on' events can return a light/fan/blind to the last known set level.
Only lighting application groups are tracked.

Home Assistant with an MQTT integration and Google assistant only allows for on/off
("Hey Google, turn on the dunny light"), and not remembering the previous level set, so
this script, in conjunction with the MQTT send/receive script works around that. Setting
another level is not affected - just "on" commands.

VERSION: 2
--]]

local logging = false
-- local lighting = {['56']=true} -- Array of applications that are used for lighting
local lighting = {} -- Home Assistant now saves previous 'on' levels, so feature is not needed, unless it is desired for some functions

function saveLastLevel()
  -- Get old levels to see if anything changed
  local oldLastLevel = storage.get('lastlvl', {})
  local changed = {}
  local k, v

  for k, v in pairs(lastLevel) do
    if oldLastLevel[k] == nil or oldLastLevel[k] ~= v then -- Add to changes
      changed[#changed + 1] = k..' '..tostring(oldLastLevel[k])..'->'..tostring(v)
    end
  end
  
  if #changed then
    storage.set('lastlvl', lastLevel)
    if logging then log('Saved last levels. Object(s) changed: '..table.concat(changed, ', ')) end
  end
end


local val = event.getvalue()

local pre = storage.get('pre'..event.dst, nil)
if tonumber(val) then comp = string.format('%.3f', val) else comp = val end
if pre ~= nil then
  if comp == pre then
    if logging then log('Not setting '..event.dst..' to '..comp..', previous value is '..pre) end
    do return end
  end
else
  pre = 'not recorded'
end

-- Send an event to publish to broker if changed
if logging then log('Setting '..event.dst..' to '..comp..', previous='..pre) end
require('socket').udp():sendto(event.dst.."/"..val, '127.0.0.1', 5432)

-- Check whether to set the level as a tracked lastlevel
if lighting ~= {} then local parts = string.split(event.dst, '/') end
if parts and lighting[parts[2]] then
  local net = tonumber(parts[1]); local app = tonumber(parts[2]); local group = tonumber(parts[3])
  lastLevel = storage.get('lastlvl', {})
  if val ~= 0 and val == GetCBusTargetLevel(net, app, group) then
    if val ~= lastLevel[event.dst] then
      lastLevel[event.dst] = val
      if logging then log('Set lastLevel to '..val..' for '..event.dst) end
      saveLastLevel()
    end
  end
else
  if storage.get('lastlvl') then
    storage.delete('lastlvl')
  end
end
--[[
CHANGE TO SUIT ENVIRONMENT
--]]

local useLastLevel = false
local lighting = {['56']=true} -- Array of applications that are used for lighting
local logging = false
 
--[[
Event-based, DO NOT execute during ramping, name: "MQTT final"

Pushes CBus events to MQTT resident scripts via internal sockets and maintains CBus 'lastlevels'

Tag required objects with the "MQTT" keyword and this script will run whenever one of those objects reaches its target level after a ramp.

Last levels are tracked so that MQTT 'on' events can return a light/fan/blind to the last known set level.
Only lighting application groups are tracked.

VERSION: 3
--]]

local storeLevel = storage.get('storeLevel', {})
local lastLevel = {}
local appS

if storeLevel ~= {} or useLastLevel then
  appS = string.split(event.dst, '/')[2]
  if lighting[appS] then lastLevel = storage.get('lastlvl', {}) end
end

function setLastLevel(val)
  if val ~= 0 and val ~= lastLevel[event.dst] then
    lastLevel[event.dst] = val
    if logging then log('Set lastLevel to '..val..' for '..event.dst) end
    storage.set('lastlvl', lastLevel)
  end
end

local val = event.getvalue()

local pre = storage.get('pre'..event.dst, nil)
if tonumber(val) then comp = string.format('%.3f', val) else comp = val end
if pre ~= nil then
  if comp == pre then
    if logging then log('Not setting '..event.dst..' to '..comp..', previous value is '..pre) end
    do return end
  end
else
  pre = 'not recorded'
end

-- Send an event to publish to broker if changed
if logging then log('Setting '..event.dst..' to '..comp..', previous='..pre) end
require('socket').udp():sendto(event.dst..">"..val, '127.0.0.1', 5432)

-- Check whether to set the level as a tracked lastlevel
if lighting[appS] then
  if useLastLevel then
    setLastLevel(val)
  else
    if storeLevel ~= {} then
      if storeLevel[event.dst] then setLastLevel(val) end
    else
      if storage.get('lastlvl') then
        storage.delete('lastlvl')
      end
    end
  end
end